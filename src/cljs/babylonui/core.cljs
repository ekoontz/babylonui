(ns babylonui.core
  (:require
   [accountant.core :as accountant]
   [babylon.english :as en]
   [babylon.nederlands :as nl]
   [babylon.translate :as tr]
   [clerk.core :as clerk]
   [cljslog.core :as log]
   [clojure.string :as string]
   [dag_unify.core :as u]
   [dommy.core :as dommy]
   [reagent.core :as r]
   [reagent.session :as session]
   [reitit.frontend :as reitit]))

;; -------------------------
;; Routes

(def router
  (reitit/router
   [["/" :index]
    ["/items"
     ["" :items]
     ["/:item-id" :item]]
    ["/about" :about]]))

(defn path-for [route & [params]]
  (if params
    (:path (reitit/match-by-name router route params))
    (:path (reitit/match-by-name router route))))

(path-for :about)

(def expression-specification-atom (atom (nth nl/expressions 0)))
(def semantics-atom (r/atom nil))

(def target-expressions
  (r/atom []))

(def source-expressions
  (r/atom []))

(defn onload-is-noop-for-now [arg]
  ;; doing nothing for onload for now.
  )

(set! (.-onload js/window)
      (fn []
        (onload-is-noop-for-now 42)))

(declare show-expressions-dropdown)

(defn update-target-expressions! [expression-node]
  (swap! target-expressions
         (fn [existing-expressions]
           (log/info (str "length of existing expressions: " (count existing-expressions)))
           (if (> (count existing-expressions) 5)
             (cons expression-node (butlast existing-expressions))
             (cons expression-node existing-expressions))))
  (let [target-expression-node {:sspec (tr/nl-to-en-spec (:expression expression-node))
                                :tspec (:spec expression-node)
                                :morph
                                (-> (:expression expression-node)
                                    tr/nl-to-en-spec
                                    en/generate
                                    en/morph)}]
    (log/info (str "source-expression: " (:morph target-expression-node)))
    (swap! source-expressions
           (fn [existing-expressions]
             (log/info (str "length of existing expressions: " (count existing-expressions)))
             (if (> (count existing-expressions) 5)
               (cons target-expression-node (butlast existing-expressions))
               (cons target-expression-node existing-expressions))))))

(defn home-page []
  (fn []
    [:div.main

     [:div {:style {:padding-left "1%"}}
      [:input {:type "button" :value "Generate NL phrase"
               :on-click #(update-target-expressions!
                           (let [spec
                                 (u/unify @expression-specification-atom
                                          {:cat :noun})]
                             {:spec spec
                              :expression (nl/generate spec)}))}]

      [show-expressions-dropdown]]

     [:div.debugpanel
      [:div
       (str @expression-specification-atom)]

      [:div
       (str @semantics-atom)]]

     [:div.expressions
      (map (fn [expression-node]
             (let [target-spec (:spec expression-node)
                   target-expression (:expression expression-node)]
               (log/info (str "target expression: " (nl/morph target-expression)))
               [:div.expression {:key (str expression-node)}
                [:span (nl/morph target-expression)]]))
           @target-expressions)]

     [:div.expressions
      (map (fn [expression-node]
             [:div.expression {:key (str expression-node)}
              [:span (:morph expression-node)]])
           @source-expressions)]]))

(defn show-expressions-dropdown []
  [:div {:style {:float "left" :border "0px dashed blue"}}
   [:select {:id "expressionchooser"
             :on-change #(do
                           (swap! expression-specification-atom
                                  (fn [x]
                                    (nth nl/expressions
                                         (js/parseInt
                                          (dommy/value (dommy/sel1 :#expressionchooser)))))))}
    (map (fn [item-id]
           (let [expression (nth nl/expressions item-id)]
             [:option {:name item-id
                       :value item-id
                       :key (str "item-" item-id)}
              (:note expression)]))
         (range 0 (count nl/expressions)))]])

(defn about-page []
(fn [] [:span.main
        [:h1 "About babylon UI"]]))

;; -------------------------
;; Translate routes -> page components

(defn page-for [route]
(case route
  :index #'home-page
  :about #'about-page))

;; -------------------------
;; Page mounting component

(defn current-page []
(fn []
  (let [page (:current-page (session/get :route))]
    [:div
     [:header
      [:p [:a {:href (path-for :index)} "Home"] " | "
       [:a {:href (path-for :about)} "About babylon UI"]]]
     [page]
     [:footer
      [:p "Babylon UI was generated by the "
       [:a {:href "https://github.com/reagent-project/reagent-template"} "Reagent Template"] "."]]])))

;; -------------------------
;; Initialize app

(defn mount-root []
(r/render [current-page] (.getElementById js/document "app")))

(defn init! []
(clerk/initialize!)
(accountant/configure-navigation!
 {:nav-handler
  (fn [path]
    (let [match (reitit/match-by-path router path)
          current-page (:name (:data  match))
          route-params (:path-params match)]
      (r/after-render clerk/after-render!)
      (session/put! :route {:current-page (page-for current-page)
                            :route-params route-params})
      (clerk/navigate-page! path)
      ))
  :path-exists?
  (fn [path]
    (boolean (reitit/match-by-path router path)))})
  (accountant/dispatch-current!)
  (mount-root))
