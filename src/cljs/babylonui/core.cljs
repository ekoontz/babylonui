(ns babylonui.core
  (:require
   [accountant.core :as accountant]
   [babylonui.nederlands :as nl]
   [clerk.core :as clerk]
   [cljslog.core :as log]
   [dommy.core :as dommy]
   [reagent.core :as reagent]
   [reagent.session :as session]
   [reitit.frontend :as reitit]))

;; -------------------------
;; Routes

(def router
  (reitit/router
   [["/" :index]
    ["/items"
     ["" :items]
     ["/:item-id" :item]]
    ["/about" :about]]))

(defn path-for [route & [params]]
  (if params
    (:path (reitit/match-by-name router route params))
    (:path (reitit/match-by-name router route))))

(path-for :about)
(def nl-contents (reagent/atom ""))

(defn generate-nl [spec]
  (let [expression-tuple (nl/generate spec)]
    [:div
     [:i (str (:surface expression-tuple))]
     " " 
     [:div.syntax-tree {:style {:float "right"}}
      [:b (str (:syntax-tree expression-tuple))]]]))


(def expression-specification-atom (atom (nth (nl/expressions) 0)))

(declare show-expressions)

(defn update-expression []
  (swap! nl-contents (fn [] (generate-nl @expression-specification-atom))))
  
(defn home-page []
  (fn []
    [:div.main
     [:div.expression
      [:div.behind-the-scenes
       @nl-contents]
      [:input {:type "button" :value "Generate NL phrase"
               :on-click update-expression}]
      (show-expressions)]]))

(defn show-expressions []
  [:div {:style {:float "left" :border "0px dashed blue"}}
   [:select {:id "expressionchooser"
             :on-change #(do
                           (swap! expression-specification-atom (fn [x] (nth (nl/expressions)
                                                                             (js/parseInt (dommy/value (dommy/sel1 :#expressionchooser))))))                      
                           (update-expression))}
    (map (fn [item-id]
           (let [expression (nth (nl/expressions) item-id)]
             [:option {:name item-id
                       :value item-id
                       :key (str "item-" item-id)}
              (:note expression)]))
         (range 0 (count (nl/expressions))))]])

(defn about-page []
  (fn [] [:span.main
          [:h1 "About babylon UI"]]))


;; -------------------------
;; Translate routes -> page components

(defn page-for [route]
  (case route
    :index #'home-page
    :about #'about-page))

;; -------------------------
;; Page mounting component

(defn current-page []
(fn []
  (let [page (:current-page (session/get :route))]
    [:div
     [:header
      [:p [:a {:href (path-for :index)} "Home"] " | "
       [:a {:href (path-for :about)} "About babylon UI"]]]
     [page]
     [:footer
      [:p "Babylon UI was generated by the "
       [:a {:href "https://github.com/reagent-project/reagent-template"} "Reagent Template"] "."]]])))

;; -------------------------
;; Initialize app

(defn mount-root []
(reagent/render [current-page] (.getElementById js/document "app")))

(defn init! []
(clerk/initialize!)
(accountant/configure-navigation!
 {:nav-handler
  (fn [path]
    (let [match (reitit/match-by-path router path)
          current-page (:name (:data  match))
          route-params (:path-params match)]
      (reagent/after-render clerk/after-render!)
      (session/put! :route {:current-page (page-for current-page)
                            :route-params route-params})
      (clerk/navigate-page! path)
      ))
  :path-exists?
  (fn [path]
    (boolean (reitit/match-by-path router path)))})
(accountant/dispatch-current!)
(mount-root))
